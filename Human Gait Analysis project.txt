# Import libraries
import tensorflow as tf
import numpy as np

# Define the dataset
X_train = np.random.rand(700, 3)
y_train = np.random.randint(2, size=700)
X_test = np.random.rand(300, 3)
y_test = np.random.randint(2, size=300)

# Normalize the features
mean = np.mean(X_train, axis=0)
std = np.std(X_train, axis=0)
X_train = (X_train - mean) / std
X_test = (X_test - mean) / std

# Define the model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(10, activation='sigmoid', input_shape=(3,)),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model
model.evaluate(X_test, y_test)
import numpy as np

np.random.seed(42)

# Generate random data for stride length, cadence, step time, stance time, and swing time
stride_length = np.random.normal(loc=1.2, scale=0.1, size=100)
cadence = np.random.normal(loc=100, scale=5, size=100)
step_time = np.random.normal(loc=0.6, scale=0.05, size=100)
stance_time = np.random.normal(loc=0.4, scale=0.05, size=100)
swing_time = step_time - stance_time

# Stack the data vertically to create a 2D array
data = np.column_stack((stride_length, cadence, step_time, stance_time, swing_time))

# Print the first 5 rows of the data
print(data[:5])


import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error

np.random.seed(42)

# Generate random data for stride length, cadence, step time, stance time, and swing time
stride_length = np.random.normal(loc=1.2, scale=0.1, size=100)
cadence = np.random.normal(loc=100, scale=5, size=100)
step_time = np.random.normal(loc=0.6, scale=0.05, size=100)
stance_time = np.random.normal(loc=0.4, scale=0.05, size=100)
swing_time = step_time - stance_time

# Stack the data vertically to create a 2D array
data = np.column_stack((stride_length, cadence, step_time, stance_time, swing_time))

# Split the data into training and testing sets with an 80:20 ratio
X_train, X_test, y_train, y_test = train_test_split(data[:, :1], data[:, 1], test_size=0.2, random_state=42)

# Train a linear regression model on the training data
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Evaluate the performance of the model using R-squared and mean squared error
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

# Plot the stride length versus cadence
plt.scatter(data[:, 0], data[:, 1])
plt.xlabel("Stride Length")
plt.ylabel("Cadence")
plt.title("Relationship between Stride Length and Cadence")
plt.show()

print(f"R-squared: {r2:.3f}")
print(f"Mean squared error: {mse:.3f}")
